**  网页渲染过程
*** 1.从网页URL到构建完DOM树
    1.当用户输入网页URL时,webkit调用其资源加载器加载该URL对应的网页;
    2.加载器依赖网络模块建立连接,发送请求并接受回复;
    3.webkit接收到各种网页或者资源数据, 其中某些资源可能是同步或异步获取的;
    4.网页交给HTML解析器转变为词语；
    5.解释器根据词语构建节点，形成DOM树；
    6.如果节点是JavaScript代码，调用JavaScript引擎解释并执行；
    7.JavaScript代码可能会修改DOM树结构；
    8.如果节点依赖其他资源，如图片\css、视频等，调用资源加载器加载它们，但这些是异步加载的，不会阻碍当前DOM树继续创建；如果是JavaScript资源URL（没有标记异步方式），则需要停止当前DOM树创建，直到JavaScript加载并被JavaScript引擎执行后才继续DOM树的创建。
    

*** 从DOM树到构建WebKit绘图上下
    1.CSS文件被CSS解释器解释成内部表示；
    2.CSS解释器完成工作后，在DOM树上附加样式信息，生成RenderObject树；
    3.RenderObject节点在创建的同时，WebKit会根据网页层次结构构建RenderLayer树，同时构建一个虚拟绘图上下文。
    

*** 绘图上下文到最终图像呈现
    1.绘图上下文是一个与平台无关的抽象类，它将每个绘图操作桥接到不同的具体实现类，也就是绘图具体实现类；
    2.绘图实现类也可能有简单的实现，也可能有复杂的实现，软件渲染、硬件渲染、合成渲染等；
    3.绘图实现类将2D图形库或者3D图形库绘制结果保存，交给浏览器界面进行展示。
    
** chrome 多进程模型
*** browser主进程
**** 负责浏览器界面的显示,各个页面的管理,是所有其他类型进程的祖先,负责他们的创建和销毁工作.只有一个
*** renderer 进程
**** 网页的渲染进程,负责页面的渲染工作,webkit渲染工作主要在这个进程完成,可有多个
***  NPAPI 插件进程
**** 创建的基本原则是每种类型的插件只会被创建一次,仅当使用时才创建,当多个网页使用同种类型的插件,进程可被共享
*** GPU进程
**** 只有一个,仅当GPU硬件加速打开时候才被创建,主要用于3D图形加速调用的实现
*** PPAPI 插件进程
**** 同NPAPI,不同的是为Pepper插件而创建的进程
** chrome 多线程模型
*** 每个进程内部都有多个线程,主要目的是为了保持用户界面的高度响应度,保证UI线程不会被任何其他费时操作阻碍影响对用户操作的响应.
** 资源缓存
**** 建立一个资源的缓存池,当webkit需要请求资源的时候,先从资源池中查找是否存在相应的资源.
**** 如果有则取出使用,没有的话webkit创建一个新的cachedResource子类对象,并发送真正的请求给服务器,webkit收到资源后将其设置到资源类对象中
**** Webkit从资源池中查找资源的关键字是URL,因为标记资源唯一性的特征就是资源的URL,如果2个资源有不同的URL,但他们内容相同,也被认为是2个不同资源

