* 2.26-4.10号需求整理
*** DONE add GameObject(0.5d)
**** TODO dispose gameObject keep order
*** DONE add component(0.5d)
*** TODO 运行与停止 (9天)
**** we need two canvas
**** 停止阶段不启动循环,每次根据事件改变state, 拿state去触发渲染一次
**** 运行时拿当前state去启动循环,读取js脚本,此时动态改变各属性,不保存该状态,停止既恢复到运行前的state
**** DONE 这里涉及到引擎启动和结束循环的问题,以及如何渲染单独帧的问题
**** DONE 需要知道引擎执行过程 
***** init -> loopBody 执行一次
***** 在loopService中封装了requestAnimationFrame, 需要保存在editorState中
***** DONE 如何处理事件,把需要改变state的事件放在哪里?
****** 放在getAndRefreshEngineState 上
**** DONE 需要2个engineState
***** 当addBox时, 需要使用getTwoEngineState
***** 当获取transform时, 只需要获取一个engineState
**** DONE redo/undo功能需要针对2个engineState
***** DONE 我们拿2个engineState去执行undo操作, 然后undo stack被执行了2次, 也就是2次undo
***** DONE 直接在allHistorySTate里添加forRun 和 forEdit, 这样直接一起undo/redo
***** TODO 需要stack存储run之前的state, 然后stop后restore
**** TODO 需要搭建对2个engineState的测试环境, 不然测试无法通过对engineStateForRun的测试
**** TODO add scene camera
***** it can't be disposed
**** resize viewport 
*** TODO 资源管理 (9天)
**** 上传图片,js文件(获取base64缓存到indexDb)
**** 将资源添加到GameObject
*** TODO 导入和导出.wd文件 (9天)
**** 将项目导出为文件,使用jszip,压缩为一个包
**** 将项目导入进来,可以读取文件资源,渲染场景
*** TODO js脚本 (3天)
*** TODO picking, 相机设置 (3天)
*** TODO transform
**** rotation
**** scale

* 4.11-5.01
*** TODO finish demos(important!!!)

*** TODO data collection
**** give pv/dv, ... statistic
*** TODO 用户流程
**** 用户可以默认打开wonder-editor, 无需登录即可使用,但无法将演唱会
在二十五岁
恋爱是风信息保存到我们服务器,信息保存为indexDb,存在丢失风险
**** 读取/保存 项目
***** 没有登录
****** 访问本地indexDb看是否存在项目,存在则读取出来进行选择
****** 保存为本地
***** 登录
****** 从服务器读取项目,进行选择
**** 读取配置文件:我们将从用户本地缓存中读取配置文件
***** 从服务器拉取默认配置,可以进行修改,保存到本地缓存,点击运行场景时读取配置进行渲染
***** 所以我们都将从用户本地缓存中读取配置文件
*** TODO ui
**** 使用css module 重写css https://github.com/camsong/blog/issues/5
* after 1.0.0
*** TODO 材质贴图设置 (3天)
**** 从资源内获取纹理设置到GameObject

*** TODO pwa 设置 (3天)
**** offline visit, cache
**** app shell
**** service worker
*** TODO mobile
**** can simulate mobile in editor
*** TODO 多人协作,改动同一个场景文件
* 版本发布流程
*** finish all TODO
*** pass all tests
**** unit, integration, render
*** check code coverage
*** git fetch aand git rebase(git push origin dev: dev )
*** checkout to master branch(git checkout master; git merge --no-ff origin dev)
*** pass code climate
*** pass ci
*** bumped release
*** check changeLog
*** pubsh git tag(git push origin --tags)
*** write github release 
*** check all budgets
*** check publish success(not do it now)
**** download new tag project from github, build it, should pass render test

* 问题集合
** 1.无法显示GameObject1
*** 删除GameObject2
*** 删除GameObject1
*** addGameObject
*** 执行undo
*** 执行undo
* 引擎执行
*** 首先需要load各种配置文件(pipeline 和 jobs)
*** 然后根据pipeline中定义的job从map中取出相应的job函数
*** 把这些函数存入到指定engineState中, 在引擎启动时执行pipeline中的job流水线
*** 其中配置文件pipleline/ 中定义流水线, job/ 中定义相应的配置信息
*** 一次loopBody就是一次渲染流水线
* 引擎问题
*** 为GameObject添加component, 如何使用这些组件
*** 这些组件在底层如何为GameObject添加信息
**** 比如添加material组件添加color, 需要添加color矩阵, 以及对应的glsl, 着色器
**** 根据组件来动态添加glsl片段, 组成完整的着色器片段, 进行渲染
**** 这样我们就可以在每次update阶段进行数据更新, 然后进行render
*** 每次loop引擎做了什么, 底层GPU做了什么
**** 可以看webgl编程指南循环改变box的position  
* 如何量变
** 这些前提都是基于你处于中级的程度
*** 对基础知识熟练掌握
*** 熟悉基本数据结构和算法
** 主动承担问题, 解决问题, 通过解决问题扩充自己的知识网
*** 对待用不到的知识不需要太深入到细节, 而是形成知识网, 当用到具体细节时再去填充网中的细节知识
** 对待工具应该保持最大掌握
*** 掌握所有能让自己生产力提高的工具
*** 掌握了工具使用也掌握了新的思维模式
** 自动化重复工作
*** 把所有需要重复的事情都写脚本让机器帮我们做
*** 把时间花在思考问题上, 而不是重复编码
** 代码质量
*** 如何写出让自己和别人理解的代码
*** 如何写出高质量的代码
*** 运用常用的设计原则保持对代码的优化
