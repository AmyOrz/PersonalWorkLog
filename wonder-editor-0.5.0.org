* DONE redo/ undo
*** DONE we are not need HistoryStore, should manage state ourself, should create three stack 
**** 我们redo/undo记录是在动作执行前，所以执行动作时后改变store，进而改变ui
**** 而最后finish时没有执行任何事情，所以并未更新ui状态，所以我们undo时回退到的版本和输入时一样,造成了误解
*** DONE 无效输入也会造成finish触发
**** change the input event to change event
*** DONE 是否存在内存泄露 --> 会释放
*** DONE 在测试中无法获取真实input dom，无法进行测试
****  改成使用onBlur事件，取消most的引入
*** DONE drag之后，获取到新的场景树数据 parent错误
**** 描述：当前场景有4个child, sceneChild:[1,2,3,4]， 把 2 拖动到 1 里面， 此时是sceneChild:[1,3,4]， 1的child[2]
**** 执行undo操作,sceneChild:[1,2,3,4],但1 的child还是存在，为[2]，这时2即是scene的child，又是 1 的child
*** DONE 测试shouldUpdate
    
* DONE add gameObject
*** TODO finish engine test
  
* TODO bug
*** TODO dispose keep order
  
* DONE add component
** DONE 完成component 外部ui，可删除组件和不可删除组件
** DONE 完成添加component ui，从json中获取可添加的组件信息
** DONE 设计如何添加component
*** 1.用户的配置信息应该固话为每个项目的信息，比如用户添加了一个instance组件给GameObject1，应该保存在该项目配置内，下次访问该配置显示GameObject1的组件
*** 2.这里可以提出一个GameObject全部组件配置文件，和用户显示哪些组件配置文件，而且需要读取用户配置文件来更改可添加组件的配置文件
*** 3.提出3个文件
**** 1.GameObject全部组件的配置文件
**** 2.GameObject显示在inspector上的配置文件，这里没有显示在inspector上的就在可添加组件中
**** 3.用户修改了GameObject显示在inspector上的配置文件，进而也修改了显示在可添加组件中的信息
**** 总结：首先我们读取用户的配置文件，不存在则读取默认GameObject显示的配置文件，当用户操作GameObject后，修改用户的配置文件
**** 这里就涉及到用户配置文件如何设计，as we all know, 存储在indexDb中，这里还涉及到用户项目存储于indexDB的过程
*** DONE 经过讨论，提出GameObject全部组件配置文件，然后进行判断当前GameObject是否存在其中component，存在则显示在inspector，不存在则显示在可添加组件中
** DONE 完成测试
*** DONE 添加组件的测试
*** DONE sourceInstance的测试
*** DONE scenetree should update
*** DONE header ui component redo/undo click
** TODO 把设置material color加入redo/undo
*** TODO finish test
** DONE finish engine test
* 用户流程
** 用户可以默认打开wonder-editor, 无需登录即可使用,但无法将信息保存到我们服务器,信息保存为indexDb,存在丢失风险
** 读取/保存 项目
*** 没有登录
**** 访问本地indexDb看是否存在项目,存在则读取出来进行选择
**** 保存为本地
*** 登录
**** 从服务器读取项目,进行选择
** 读取配置文件:我们将从用户本地缓存中读取配置文件
*** 从服务器拉取默认配置,可以进行修改,保存到本地缓存,点击运行场景时读取配置进行渲染
*** 所以我们都将从用户本地缓存中读取配置文件
* TODO 添加camera
* 删除component
* 什么是数据和逻辑分离
*** 当多个模块操作一个数据时, 这时数据不应该和某一个模块耦合在一起, 而应该单独提出数据层, 由多个模块访问这个数据层获取数据

* extract 微服务架构
*** DONE 是否需要把composite 中提供的api  --> 用户只调用facade
*** DONE facade 层是否存在逻辑?
**** not save
*** DONE gameObject -> addChild func use transformData, the addChild func store in gameObjectService or transformService? 
**** transform module
*** DONE 不是很清楚commonService的真正用处, 现在看来是封装了所有的adaptor代码
**** 多处使用的更小数据操作函数  save commonservice
**** 比如 editorState 中操作scene放在一个commonService, 操作currentGameObject放在一个commonService
*** DONE getCurrentGameObjectLocalPosition 应该放在composite里面, 对应模块叫什么名字
**** 删除currentGameObject这种指定的东西
*** DONE addBox 也是在composite里面,对应模块叫什么
**** primitiveCOmpositeService
*** DONE 只要模块命表示出操作的数据,不需要在func名词中再次涉及

*** DONE GameObjectEngineService and transformEngineService has common function
**** GameObjectUtils中 addChild, 使用了GameObjectEngineService 和 transformEngineService, 所以提到utils中

*** DONE record 层没有func, 都在primitive中
**** 应该是在record中, 而record中相同的代码提到primitive中

*** DONE inspector组件中显示组件的func应该提到GameObjectEngineService?
**** 提到gameObjectUtils中,ui层相关逻辑都在utils中
    
*** TODO treeNode data放在哪里?
**** treeNode属于sceneGraph, 应该在ui层
** stateTuple层命名
*** logic(editor,engine):只操作了editor和engine的stateTuple层
*** history:操作了historyData的层
**** editorHistory: 操作了history和editor
**** engineHistory: 操作了history和engine
**** uiHistory: 操作了history和appStore
**** allHistory: 操作了editor engine ui 以及 history
