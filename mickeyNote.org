***  你崇拜別人的時候，你就是不相信自己的，(因為)你覺得別人比你優秀。你不相信自己的時候，其實你內心是受傷的。你內心受傷的時候，你就會變得有攻擊性 。
* git
*** bumped release publish
**** bumped release <major|minor|pacth>
*** git reset
**** 1.git reset --soft + commit：git将重置HEAD到指定commit,但git将停止在这里什么也不会做发生变化
**** 1.git reset --hard + commit：git将重置HEAD到指定commit,并把所有文件回退到指定commit处，具有破坏性，使用请谨慎

     
* emacs technology
***  切换输入法
**** 1.ctrl+x
**** 2.回车
**** 3.ctrl+\

*** spacemacs 操作git
**** git add -i  ==> SPC g s,然后使用s去选择需要提交的文件,也可以 SPC g S添加当前文件
**** git commit  ==> 在git选择界面按 c c, 输入完成后ctrl c + ctrl c完成commit，ctrl c + ctrl k取消commit
**** git push    ==> 在git选择界面按 p, 然后选择提交分支, u 为master, 就能完成提交

*** emacs操作快捷键
**** 1.使用alt + 方向键（<-,->）切换标题等级
**** 3.shift + 方向键（<-,->）可以快速切换todo
**** 4.ctrl c + n 跳到下一个主标题, ctrl c + p 调到上一个主标题

*** 如何在spacesmacs中添加模块
**** 1.首先需要在~/.emacs.d/site-lisp/中添加模块文件夹,然后把模块文件.el放到文件夹中
**** 2.在dotspacemacs/user-config中添加(add-to-list 'load-path "~/.emacs.d/site-lisp/auto-save")

    
* 编程规范
**** 一般在函数中不使用变量，直接使用函数替代变量，这样不必维护一个状态。
**** 当函数中有多个地方同时使用一个函数时，可考虑提取为变量，目的在于缓存变量，提高性能(package-initialize)
**** 完成功能要考虑到redo/undo的添加以及对应的测试

* 测试规范
*** ui测试分为snapshot 和 logic 层次测试
*** 如果一个describe 描述的方法实现，可以直接描述，如果不是内部细节，前面加上test 加以描述，让读者知道这里在进行测试
*** 完成功能首先考虑单元测试,设计组件太多考虑集成测试
*** 完成能够从ui/editor/engine 3个层次考虑测试
* most api
*** debounce 
**** 监听用户key in事件，是指定时间之后才会发射一个流出去，这处于用户输入时，我们需要在用户停止输入后500ms再发射流


* 个人计划表
*** 每天早上6点起床,站桩半小时
*** 7点开始读英语/记单词
*** 8点开始写代码
*** 星期1,3,5,7下午4点准备去健身
*** 星期4和星期5晚上休息,可以玩游戏, 其余时间晚上正常编程   
*** 除了星期4/5晚上可以玩游戏之外,其余时间尽量不碰游戏和其余社交活动  
