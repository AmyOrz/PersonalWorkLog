* 注册job，开启主循环
**** 首先在编辑器中注册编辑器需要使用的initJob和loopJob，这些job存在一个map中，引擎init时会把这些job与引擎的initJob和loopJob合并成一个map
**** 这个map可以根据job名称取到一个方法，执行方法就可以执行相关逻辑代码
**** 然后Init_pipeline里定义了每个job的执行顺序，init_jobs里定义了每个job的name和可配置属性，比如clear的color
**** 最后会根据pipeline里的顺序生成一个list， list中存储了job对象的方法，在init和loop期间会依次执行list中的方法
**** 在Director中控制引擎的启动和循环，initDirector执行每个initJob，而loopBody执行每个loopJob
* 组件开发————ESC架构
**** Wonder采用ESC和DOP架构
**** ESC架构： 创建的GameObject都是空的，他的组件是个数组，可以向GameObject添加组件，添加到数组中然后遍历数组执行组件逻辑
**** DOP架构： GameObject和component都只是index，存储在一个map中
**** 一个GameObject对应多个component，component具体数据存储在一个arrayBuffer里面
**** loopBody在我们需要更新场景数据时，如GameObject和component添加/删除
**** 一个GameObject会把所有可能有的组件进行switch，判断哪些组件存在，存在则执行相关逻辑
**** 这些组件在底层如何为GameObject添加信息
***** 比如添加material组件添加color, 需要添加color矩阵, 以及对应的glsl, 着色器
***** 根据组件来动态添加glsl片段, 组成完整的着色器片段, 进行渲染
***** 这样我们就可以在每次update阶段进行数据更新, 然后进行render
